const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const UglifyJsPlugin = require('uglifyjs-webpack-plugin');

const DEV = process.env.NODE_ENV !== 'production';
const DIST_FOLDER = path.join('src', 'http', 'get-assets-000file', 'files');
const LIB_FOLDER = path.join(__dirname, 'lib', 'scripts');

const LAYOUT_BANNER = `/*###################################################
#                                                   #
#   CAUTION!! THIS FILE WAS GENERATED BY WEBPACK!   #
#                                                   #
# If you want to apply changes, go to ./lib/layout/ #
#                                                   #
###################################################*/`;

const jsFileName = DEV
  ? `${DIST_FOLDER}/main.js`
  : `${DIST_FOLDER}/[name].[chunkhash:6].js`;
const cssFileName = DEV
  ? `${DIST_FOLDER}/main.css`
  : `${DIST_FOLDER}/[name].[chunkhash:6].css`;
const mode = DEV ? 'development' : 'production';

const optimization = {
  namedModules: false,
  namedChunks: false,
  nodeEnv: 'production',
  flagIncludedChunks: true,
  occurrenceOrder: true,
  sideEffects: true,
  usedExports: true,
  concatenateModules: true,
  splitChunks: {
    hidePathInfo: true,
    minSize: 30000,
    maxAsyncRequests: 5,
    maxInitialRequests: 3,
  },
  noEmitOnErrors: true,
  checkWasmTypes: true,
  minimize: true,
  minimizer: [
    new UglifyJsPlugin({
      exclude: /\/layout/,
    }),
  ],
};

const config = {
  mode,

  devtool: 'cheap-module-eval-source-map',

  entry: [
    path.resolve(LIB_FOLDER, 'admin', 'index.js'),
    path.resolve(LIB_FOLDER, 'admin', 'main.css'),
  ],

  output: {
    filename: jsFileName,
    path: __dirname,
  },

  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: ['@babel/preset-env'],
          },
        },
      },
      {
        test: /\.css$/,
        use: [
          {
            loader: MiniCssExtractPlugin.loader,
            options: {
              publicPath: '../',
            },
          },
          'css-loader',
          'postcss-loader',
        ],
      },
    ],
  },

  externals: {
    react: 'React',
    'react-dom': 'ReactDOM',
    'react-router-dom': 'ReactRouterDOM',
    'react-ace': 'ReactAce',
  },

  plugins: [
    new MiniCssExtractPlugin({
      filename: cssFileName,
    }),
    new HtmlWebpackPlugin({
      filename: 'src/views/layouts/admin.js',
      template: path.resolve(
        __dirname,
        path.join('lib', 'layout', 'admin.ejs')
      ),
      inject: false,
      LAYOUT_BANNER,
    }),
    new HtmlWebpackPlugin({
      filename: 'src/views/layouts/blog.js',
      template: path.resolve(__dirname, path.join('lib', 'layout', 'blog.ejs')),
      inject: false,
      LAYOUT_BANNER,
    }),
  ],
};

if (!DEV) {
  config.optimization = optimization;
}

module.exports = config;
